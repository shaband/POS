basePath: /api/v1
definitions:
  dto.CategoryDTO:
    properties:
      name:
        example: category1
        type: string
    type: object
  dto.CreateUserDTO:
    properties:
      email:
        example: shaband@shaband.com
        type: string
      name:
        example: shaband
        type: string
      password:
        example: "123"
        type: string
      password_confirmation:
        example: "123"
        type: string
      phone:
        example: "0123456789"
        type: string
    type: object
  dto.InventoryDTO:
    properties:
      address:
        example: address1
        type: string
      name:
        example: inventory1
        type: string
    type: object
  dto.InvoiceDTO:
    properties:
      client_id:
        example: 1
        type: integer
      inventory_id:
        example: 6
        type: integer
      is_sell:
        example: true
        type: boolean
      items:
        items:
          $ref: '#/definitions/dto.InvoiceItemDTO'
        type: array
      total_cost:
        example: 1000
        type: number
      total_price:
        example: 10000
        type: number
      user_id:
        example: 1
        type: integer
    type: object
  dto.InvoiceItemDTO:
    properties:
      amount:
        example: 1
        type: number
      product_id:
        example: 1
        type: integer
      unit_cost_price:
        example: 1000
        type: number
      unit_sell_price:
        example: 10000
        type: number
    type: object
  dto.UpdateUserDTO:
    properties:
      email:
        example: shaband@shaband.com
        type: string
      name:
        example: shaband
        type: string
      password:
        example: "123"
        type: string
      password_confirmation:
        example: "123"
        type: string
      phone:
        example: "0123456789"
        type: string
    type: object
  model.Category:
    properties:
      category_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: category1
        type: string
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
    type: object
  model.Client:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      is_client:
        type: boolean
      is_supplier:
        type: boolean
      name:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
    type: object
  model.Inventory:
    properties:
      address:
        example: address1
        type: string
      id:
        example: 1
        type: integer
      name:
        example: category1
        type: string
      productStock:
        $ref: '#/definitions/model.InventoryToProduct'
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
    type: object
  model.InventoryToProduct:
    properties:
      amount:
        type: integer
      buy_invoices_count:
        type: integer
      inventory:
        $ref: '#/definitions/model.Inventory'
      inventoryID:
        type: integer
      product:
        $ref: '#/definitions/model.Product'
      productID:
        type: integer
      sell_invoices_count:
        type: integer
    type: object
  model.Product:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      category_id:
        example: 1
        type: integer
      code:
        example: "123"
        type: string
      cost_price:
        example: "10"
        type: string
      id:
        example: 1
        type: integer
      image:
        example: http://lorempicsm/100.jpg
        type: string
      inventories:
        items:
          $ref: '#/definitions/model.Inventory'
        type: array
      name:
        example: category1
        type: string
      sell_price:
        example: "100"
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
    type: object
  output.Category:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: category1
        type: string
    type: object
  output.Client:
    properties:
      email:
        example: shaband@shaband.com
        type: string
      id:
        example: 1
        type: integer
      isClient:
        example: true
        type: boolean
      isSupplier:
        example: true
        type: boolean
      name:
        example: shaband
        type: string
      phone:
        example: "123456789"
        type: string
    type: object
  output.HTTPError:
    properties:
      message:
        example: name field is required
        type: string
      success:
        example: false
        type: boolean
    type: object
  output.Inventory:
    properties:
      address:
        example: address1
        type: string
      id:
        example: 1
        type: integer
      name:
        example: inventory
        type: string
    type: object
  output.Invoice:
    properties:
      client:
        $ref: '#/definitions/output.NameWithID'
      id:
        example: 1
        type: integer
      inventory:
        $ref: '#/definitions/output.NameWithID'
      isSell:
        type: boolean
      items:
        items:
          $ref: '#/definitions/output.InvoiceItem'
        type: array
      totalCost:
        type: number
      totalPrice:
        type: number
      user:
        $ref: '#/definitions/output.NameWithID'
    type: object
  output.InvoiceItem:
    properties:
      amount:
        example: 3
        type: integer
      id:
        example: 1
        type: integer
      product:
        $ref: '#/definitions/output.Product'
      totalCost:
        example: 6
        type: number
      totalPrice:
        example: 3
        type: number
      unitCostPrice:
        example: 2
        type: number
      unitSellPrice:
        example: 1
        type: number
    type: object
  output.NameWithID:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: name
        type: string
    type: object
  output.Product:
    properties:
      code:
        example: "124"
        type: string
      cost_price:
        example: "5"
        type: string
      id:
        example: 1
        type: integer
      image:
        example: http://image.com/image.jpg
        type: string
      name:
        example: product 1
        type: string
      sell_price:
        example: "10"
        type: string
    type: object
  output.User:
    properties:
      email:
        example: shaband@shaband.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: shaband
        type: string
      phone:
        example: "123456789"
        type: string
    type: object
host: localhost:3500
info:
  contact:
    email: mahmoudshaband@gmail.com
    name: Shabandinho
  description: This is a POS api docs
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: POS API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: get All Categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.Category'
            type: array
      summary: get All Categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Add New Category
      parameters:
      - description: category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/output.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Add New Category
      tags:
      - categories
  /categories/{category_id}:
    patch:
      consumes:
      - application/json
      description: Update  Category
      parameters:
      - description: category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDTO'
      - description: category id
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Update  Category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: delete  Category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted successfully
          schema:
            type: string
      summary: delete  Category
      tags:
      - categories
  /clients:
    get:
      consumes:
      - application/json
      description: get All Clients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.Client'
            type: array
      summary: get All Clients
      tags:
      - clients
    post:
      consumes:
      - multipart/form-data
      description: Add New Client
      parameters:
      - description: enter client name
        in: formData
        name: name
        required: true
        type: string
      - description: enter client email
        in: formData
        name: email
        required: true
        type: string
      - description: enter client phone
        in: formData
        name: phone
        required: true
        type: number
      - description: ' is client ?'
        in: formData
        name: is_client
        type: boolean
      - description: is supplier ?
        in: formData
        name: is_supplier
        type: boolean
      - description: image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/output.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Add New Client
      tags:
      - clients
  /clients/{client_id}:
    patch:
      consumes:
      - multipart/form-data
      description: Update  Client
      parameters:
      - description: enter client name
        in: formData
        name: name
        required: true
        type: string
      - description: enter client email
        in: formData
        name: email
        required: true
        type: string
      - description: enter client phone
        in: formData
        name: phone
        required: true
        type: number
      - description: is client ?
        in: formData
        name: is_client
        type: boolean
      - description: is supplier ?
        in: formData
        name: is_supplier
        type: boolean
      - description: image
        in: formData
        name: image
        required: true
        type: file
      - description: client id
        in: path
        name: client_id
        required: true
        type: integer
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Update  Client
      tags:
      - clients
  /clients/{id}:
    delete:
      consumes:
      - application/json
      description: delete  Client
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted successfully
          schema:
            type: string
      summary: delete  Client
      tags:
      - clients
  /inventories:
    get:
      consumes:
      - application/json
      description: get All Inventories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.Inventory'
            type: array
      summary: get All Inventories
      tags:
      - inventories
    post:
      consumes:
      - application/json
      description: Add New Inventory
      parameters:
      - description: inventory data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.InventoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/output.Inventory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Add New Inventory
      tags:
      - inventories
  /inventories/{id}:
    delete:
      consumes:
      - application/json
      description: delete  Inventory
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted successfully
          schema:
            type: string
      summary: delete  Inventory
      tags:
      - inventories
  /inventories/{inventory_id}:
    patch:
      consumes:
      - application/json
      description: Update  Inventory
      parameters:
      - description: inventory data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.InventoryDTO'
      - description: inventory id
        in: path
        name: inventory_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Inventory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Update  Inventory
      tags:
      - inventories
  /invoices:
    get:
      consumes:
      - application/json
      description: get All Invoices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.Invoice'
            type: array
      summary: get All Invoices
      tags:
      - invoices
    post:
      consumes:
      - application/json
      description: Add New Invoice
      parameters:
      - description: invoice data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.InvoiceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Invoice Stored Successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Add New Invoice
      tags:
      - invoices
  /products:
    get:
      consumes:
      - application/json
      description: get All Products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.Product'
            type: array
      summary: get All Products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Add New Product
      parameters:
      - description: enter product name
        in: formData
        name: name
        required: true
        type: string
      - description: enter product code
        in: formData
        name: code
        required: true
        type: string
      - description: enter product cost price
        in: formData
        name: cost_price
        required: true
        type: number
      - description: enter product sell price
        in: formData
        name: sell_price
        required: true
        type: number
      - description: category ID
        in: formData
        name: category_id
        required: true
        type: integer
      - description: image
        in: formData
        name: image
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/output.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Add New Product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: delete  Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted successfully
          schema:
            type: string
      summary: delete  Product
      tags:
      - products
  /products/{product_id}:
    get:
      consumes:
      - application/json
      description: show  Product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: show  Product
      tags:
      - products
    patch:
      consumes:
      - multipart/form-data
      description: Update  Product
      parameters:
      - description: enter product name
        in: formData
        name: name
        required: true
        type: string
      - description: enter product code
        in: formData
        name: code
        required: true
        type: string
      - description: enter product cost price
        in: formData
        name: cost_price
        required: true
        type: number
      - description: enter product sell price
        in: formData
        name: sell_price
        required: true
        type: number
      - description: category ID
        in: formData
        name: category_id
        required: true
        type: integer
      - description: image
        in: formData
        name: image
        required: true
        type: file
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Update  Product
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: get All Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/output.User'
            type: array
      summary: get All Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add New User
      parameters:
      - description: user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/output.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Add New User
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete  User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: deleted successfully
          schema:
            type: string
      summary: delete  User
      tags:
      - users
  /users/{user_id}:
    patch:
      consumes:
      - application/json
      description: Update  User
      parameters:
      - description: user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDTO'
      - description: user id
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/output.HTTPError'
      summary: Update  User
      tags:
      - users
swagger: "2.0"
